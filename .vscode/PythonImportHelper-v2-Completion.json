[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "process_image",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_image(image_path):\n    image = cv2.imread(image_path)\n    if image is None:\n        print(\"Erreur: Impossible de charger l'image.\")\n        return\n    img_h, img_w, _ = image.shape\n    # Détection des visages avec YOLO\n    results = model(image)\n    total_looking, total_detected = 0, 0\n    for result in results:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model = YOLO(\"face_yolov8s.pt\")  # Mets le bon chemin vers ton modèle\n# Charger Face Mesh\nmp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh(static_image_mode=True, max_num_faces=10, min_detection_confidence=0.5)\n# Dossier pour surveiller les images\nimage_path = \"image.png\"  # Modifie selon ton besoin\ndef process_image(image_path):\n    image = cv2.imread(image_path)\n    if image is None:\n        print(\"Erreur: Impossible de charger l'image.\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mp_face_mesh",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "mp_face_mesh = mp.solutions.face_mesh\nface_mesh = mp_face_mesh.FaceMesh(static_image_mode=True, max_num_faces=10, min_detection_confidence=0.5)\n# Dossier pour surveiller les images\nimage_path = \"image.png\"  # Modifie selon ton besoin\ndef process_image(image_path):\n    image = cv2.imread(image_path)\n    if image is None:\n        print(\"Erreur: Impossible de charger l'image.\")\n        return\n    img_h, img_w, _ = image.shape",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "face_mesh",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "face_mesh = mp_face_mesh.FaceMesh(static_image_mode=True, max_num_faces=10, min_detection_confidence=0.5)\n# Dossier pour surveiller les images\nimage_path = \"image.png\"  # Modifie selon ton besoin\ndef process_image(image_path):\n    image = cv2.imread(image_path)\n    if image is None:\n        print(\"Erreur: Impossible de charger l'image.\")\n        return\n    img_h, img_w, _ = image.shape\n    # Détection des visages avec YOLO",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "image_path = \"image.png\"  # Modifie selon ton besoin\ndef process_image(image_path):\n    image = cv2.imread(image_path)\n    if image is None:\n        print(\"Erreur: Impossible de charger l'image.\")\n        return\n    img_h, img_w, _ = image.shape\n    # Détection des visages avec YOLO\n    results = model(image)\n    total_looking, total_detected = 0, 0",
        "detail": "main",
        "documentation": {}
    }
]